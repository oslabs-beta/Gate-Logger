import axios from 'axios';

// the current expected length of project IDs
// these are automatically generated by mongoDB
const PROJECT_ID_LENGTH = 24;

// the current expected length of API keys
// these are random char strings generated in the
// backend of the Gateway webapp
const API_KEY_LENGTH = 10;

/**
 *   @function verification validates format of API requests & verifies key provided in header
 *   matches key in associated project's entry in DB. If either fail, returns error.
 *
 *   @param gateURI the web app's URI, during development it is localhost:3000
 *   @param projectID the 20 char mongoDB-assigned ID for the project
 *   @param logKey the 10 char random string given to user from webapp
 *
 *   @returns Error if any of these parameters are syntactically wrong, or if the
 *      web app's server is having issues, otherwise returns nothing
 */
export default async function verification(
    gateURI: string,
    projectID: string,
    logKey: string
): Promise<void | Error> {
    let dbKey: string | Error = '';

    // if the gate URI responds with a bad status code, throw an error
    // (in place to make sure webapp is running)
    await axios(gateURI)
        .then((response) => {
            if (response.status >= 400)
                throw new SyntaxError('[Log API] Invalid Gateway URL provided');
        })
        // throws error if server is not running
        .catch((err) => {
            throw new Error(`[Log API] Server not running ${err}`);
        });

    // if project query is the wrong length: ?project=[projectID] is required
    if (projectID?.length !== PROJECT_ID_LENGTH) {
        throw new SyntaxError('[Log API] Project ID passed into middleware is invalid');
    }

    // if provided log_key length is wrong
    if (logKey?.length !== API_KEY_LENGTH) {
        throw new SyntaxError(
            '[Log API] Log_key header is an incorrect length, must be 10 characters.'
        );
    }

    // this endpoint returns the associated project's API key
    await axios(`${gateURI}/key/${projectID}`)
        .then((key: any): void => {
            dbKey = key.data;
        })
        .catch((err: Error): Error => {
            throw new Error(`[Log API] Communication error with Gateway backend ${err}`);
        });

    // if received DB key's length is wrong
    if (dbKey.length !== API_KEY_LENGTH)
        throw new SyntaxError('[Log API] API key from DB is incorrect length.');

    if (logKey !== dbKey)
        throw new Error(
            `[Log API] The log_key provided in header does not match the key of the project specified`
        );
}
